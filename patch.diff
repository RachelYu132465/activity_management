diff --git a//dev/null b/scripts/core/build_mapping.py
index 0000000000000000000000000000000000000000..70e153ebcc68c06bd0342bb7024ff6a2720d394c 100644
--- a//dev/null
+++ b/scripts/core/build_mapping.py
@@ -0,0 +1,119 @@
+from __future__ import annotations
+
+import json
+import re
+from datetime import datetime, timedelta
+from pathlib import Path
+from typing import Any, Dict, Iterable, List, Tuple
+
+BASE_DIR = Path(__file__).resolve().parents[2]
+DATA_DIR = BASE_DIR / "data"
+
+INVALID_WIN = r'[<>:"/\\|?*\x00-\x1F]'
+
+
+def sanitize_filename(name: str, max_len: int = 100) -> str:
+    """Return a filesystem-safe version of *name* truncated to *max_len* characters."""
+    s = (name or "").replace("\r", " ").replace("\n", " ").replace("\t", " ")
+    s = re.sub(INVALID_WIN, " ", s)
+    s = re.sub(r"\s+", " ", s).strip()
+    return s[:max_len]
+
+def read_json_relaxed(p: Path) -> Any:
+    """Load a JSON file allowing trailing commas and UTF-8 BOM."""
+    s = p.read_text(encoding="utf-8")
+    if s and s[0] == "\ufeff":
+        s = s.lstrip("\ufeff")
+    s = re.sub(r",\s*(?=[}\]])", "", s)
+    return json.loads(s)
+
+def flatten_list(data: Iterable[Any]) -> List[Dict[str, Any]]:
+    """Recursively flatten nested lists of dictionaries."""
+
+    out: List[Dict[str, Any]] = []
+
+    def rec(x: Iterable[Any]) -> None:
+        if isinstance(x, dict):
+            out.append(x)
+        elif isinstance(x, list):
+            for y in x:
+                rec(y)
+
+    rec(data)
+    return out
+
+def load_json(name: str) -> Any:
+    """Search for *name* under :data:`DATA_DIR` and return parsed JSON contents."""
+    for cand in [DATA_DIR / name, *DATA_DIR.rglob(name)]:
+        if cand.exists():
+            return read_json_relaxed(cand)
+    raise FileNotFoundError(f"找不到 {name}")
+
+def compute_times(
+    settings: Dict[str, Any],
+    speakers: List[Dict[str, Any]],
+) -> Dict[Any, Tuple[str, str]]:
+    """Compute start/end times for each speaker and return a lookup table."""
+
+    times: Dict[Any, Tuple[str, str]] = {}
+    fmt = "%H:%M"
+    cur = datetime.strptime(settings["start_time"], fmt)
+    per = int(settings.get("speaker_minutes", 30))
+
+    for s in settings.get("special_sessions", []):
+        if int(s.get("after_speaker", -1)) == 0:
+            cur += timedelta(minutes=int(s.get("duration") or 0))
+
+    for sp in speakers:
+        start, end = cur, cur + timedelta(minutes=per)
+        times[sp.get("no")] = (start.strftime(fmt), end.strftime(fmt))
+        if sp.get("name"):
+            times[sp["name"]] = (start.strftime(fmt), end.strftime(fmt))
+        cur = end
+        for ss in settings.get("special_sessions", []):
+            if int(ss.get("after_speaker", -1)) == sp.get("no"):
+                cur += timedelta(minutes=int(ss.get("duration") or 0))
+    return times
+
+def get_event_speaker_mappings(event_name: str) -> List[Dict[str, Any]]:
+    """Return a list of merged program/activity/influencer info for *event_name*."""
+
+    programs = load_json("program_data.json")
+    activities = load_json("activities_data.json")
+    influencers = flatten_list(load_json("influencer_data.json"))
+
+    program = next((p for p in programs if event_name in (p.get("eventNames") or [])), None)
+    if not program:
+        raise ValueError(f"找不到 program: {event_name}")
+    activity = next((a for a in activities if event_name in (a.get("eventNames") or [])), None)
+    if not activity:
+        raise ValueError(f"找不到 activities: {event_name}")
+
+    infl_map = {i.get("name"): i for i in influencers if i.get("name")}
+    for i in influencers:
+        org = (i.get("current_position") or {}).get("organization")
+        if org and org not in infl_map:
+            infl_map[org] = i
+
+    time_map = compute_times(activity["agenda_settings"], activity["speakers"])
+    results = []
+    for sp in activity["speakers"]:
+        name = sp.get("name") or ""
+        inf = infl_map.get(name, {})
+        st, et = time_map.get(sp.get("no"), ("", ""))
+
+        locations = program.get("locations") or ["", ""]
+        mapping = {
+            "no": sp.get("no"),
+            "name": name,
+            "topic": sp.get("topic", ""),
+            "start_time": st,
+            "end_time": et,
+            "date": program.get("date", ""),
+            "location_main": locations[0],
+            "location_addr": locations[1] if len(locations) > 1 else "",
+            **inf,  # 展開 influencer 欄位
+        }
+        mapping["safe_filename"] = sanitize_filename(name or inf.get("name") or "TBD")
+        results.append(mapping)
+    return results
